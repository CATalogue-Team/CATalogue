> from flask import Blueprint, render_template, redirect, url_for, request, current_app, flash, make_response, jsonify
> from ..extensions import csrf  # 导入CSRF扩展
> from app.middlewares.error_handler import APIError
> from flask.wrappers import Response
> from pathlib import Path
> from flask_login import login_required, current_user
> from .. import limiter, db
> from werkzeug.utils import secure_filename
> import os
> from datetime import datetime, timezone
> from ..services.cat_service import CatService
> from ..services.user_service import UserService
> from ..forms import CatForm
> from ..decorators import admin_required, owner_required
> from ..models import CatImage, Cat
> from ..core.base_crud import BaseCRUD
  
> bp = Blueprint('cats', __name__, url_prefix='/cats')
> api_bp = Blueprint('cats_api', __name__, url_prefix='/api/v1/cats')
  
  # 初始化BaseCRUD
> cat_crud = BaseCRUD(
>     service=CatService(db),
>     model_name='cat',
>     list_template='search.html',
>     detail_template='cat_detail.html',
>     edit_template='edit_cat.html',
>     list_route='cats.admin_cats_list',
>     detail_route='cats.admin_detail',
>     create_route='cats.admin_cats_create',
>     edit_route='cats.admin_cats_edit',
>     delete_route='cats.admin_cats_delete'
> )
  
  # Web界面路由
> @bp.route('/search')
> @login_required
> def search() -> Response:
!     search_params = {
!         'q': request.args.get('q', ''),
!         'breed': request.args.get('breed', ''),
!         'min_age': request.args.get('min_age', type=int),
!         'max_age': request.args.get('max_age', type=int),
!         'is_adopted': request.args.get('is_adopted', type=lambda x: x == 'true')
!     }
      
!     cat_service = CatService(db)
!     cats = cat_service.search(
!         keyword=search_params['q'],
!         breed=search_params['breed'],
!         min_age=search_params['min_age'],
!         max_age=search_params['max_age'],
!         is_adopted=search_params['is_adopted']
!     )
      
!     return make_response(render_template('search.html', 
!                          cats=cats,
!                          search_params=search_params))
  
  # 猫咪详情页
> @bp.route('/admin/detail/<int:id>')
> @login_required
> @admin_required
> def admin_detail(id: int) -> Response:
>     """管理员查看猫咪详情(使用BaseCRUD)"""
!     return cat_crud.detail(
!         id=id,
!         additional_context={
!             'is_admin': current_user.is_admin,
!             'is_owner': lambda cat: current_user.id == cat.user_id
!         }
!     )
  
  # API路由 - 获取单个猫咪
> @api_bp.route('/<int:id>', methods=['GET'])
> @login_required
> def api_cats_get(id):
>     """获取单个猫咪(API)"""
>     cat = CatService(db).get(id)
>     if not cat:
>         return jsonify({'error': 'Cat not found'}), 404
>     return jsonify({
>         'id': cat.id,
>         'name': cat.name,
>         'breed': cat.breed,
>         'age': cat.age,
>         'description': cat.description,
>         'is_adopted': cat.is_adopted
>     })
  
  # API路由 - 猫咪列表
> @api_bp.route('', methods=['GET'])
> @login_required
> def api_cats_list():
>     """获取猫咪列表(API)"""
>     items = CatService(db).search()
>     if not isinstance(items, list) or (items and not hasattr(items[0], 'id')):
!         current_app.logger.error(f"Invalid cats data type: {type(items)}")
!         items = []
>     return jsonify([{
>         'id': cat.id,
>         'name': cat.name,
>         'breed': cat.breed,
>         'age': cat.age,
>         'description': cat.description,
>         'is_adopted': cat.is_adopted
>     } for cat in items])
  
  # Web管理路由
> @bp.route('', endpoint='admin_cats_list')
> @login_required
> def cats_list():
>     """猫咪列表"""
!     page = request.args.get('page', 1, type=int)
!     per_page = current_app.config.get('ITEMS_PER_PAGE', 10)
!     items = CatService(db).search()
!     if not isinstance(items, list) or (items and not hasattr(items[0], 'id')):
!         current_app.logger.error(f"Invalid cats data type: {type(items)}")
!         items = []
!     return render_template('search.html', cats=items)
  
  # API路由 - 创建猫咪
> @api_bp.route('', methods=['POST'])
> @limiter.limit("10 per minute")
> @csrf.exempt  # 禁用CSRF保护
> @login_required
> def api_cats_create():
>     """创建猫咪(API)"""
>     current_app.logger.info(f"Request headers: {request.headers}")
      
      # 检查Content-Type
>     if request.content_type != 'application/json':
!         return jsonify({'error': 'Content-Type must be application/json'}), 400
      
>     try:
>         data = request.get_json()
>         if data is None:
!             return jsonify({'error': 'Request body must be valid JSON'}), 400
!     except Exception as e:
!         current_app.logger.error(f"JSON解析错误: {str(e)}")
!         return jsonify({'error': 'Invalid JSON format'}), 400
      
>     current_app.logger.info(f"Request data: {data}")
      
      # 添加详细日志记录
>     current_app.logger.debug(f"Request headers: {request.headers}")
>     current_app.logger.debug(f"Request content type: {request.content_type}")
>     current_app.logger.debug(f"Request method: {request.method}")
>     current_app.logger.debug(f"Request URL: {request.url}")
      
>     if not isinstance(data, dict):
!         return jsonify({'error': 'Request body must be a JSON object'}), 400
      
      # 检查必填字段
>     required_fields = ['name', 'age', 'breed']
>     missing_fields = [field for field in required_fields if field not in data]
>     if missing_fields:
>         current_app.logger.error(f"Missing required fields: {missing_fields}")
>         return jsonify({
>             'error': 'Missing required fields',
>             'missing': missing_fields
>         }), 400
      
      # 验证数据类型
>     try:
>         if not isinstance(data, dict):
!             raise ValueError
>         if isinstance(data.get('age'), str):
!             data['age'] = int(data['age'])
>         elif not isinstance(data.get('age'), int):
!             raise ValueError
!     except (ValueError, TypeError):
!         current_app.logger.error(f"Invalid age value: {data.get('age', 'unknown')}")
!         return jsonify({'error': 'Age must be an integer'}), 400
      
>     try:
>         with db.session.begin():
>             current_app.logger.debug(f"Creating cat with data: {data}")
>             user_id = int(data.get('user_id', current_user.id)) if data.get('user_id') else current_user.id
>             cat = CatService(db).create_cat(
>                 name=data['name'],
>                 breed=data['breed'],
>                 age=int(data['age']),
>                 description=data.get('description', ''),
>                 is_adopted=bool(data.get('is_adopted', False)),
>                 user_id=user_id,
>     created_at=datetime.now(timezone.utc),
>     updated_at=datetime.now(timezone.utc)
>             )
>             current_app.logger.debug(f"Created cat: {cat.id}")
>         return jsonify({
>             'id': cat.id,
>             'name': cat.name,
>             'breed': cat.breed,
>             'age': cat.age,
>             'description': cat.description,
>             'is_adopted': cat.is_adopted
>         }), 201
!     except ValueError as e:
!         db.session.rollback()
!         current_app.logger.error(f'API创建猫咪参数错误: {str(e)}')
!         return jsonify({'error': 'Invalid parameter value'}), 400
!     except Exception as e:
!         db.session.rollback()
!         current_app.logger.error(f'API创建猫咪失败: {str(e)}')
!         return jsonify({'error': 'Internal server error'}), 500
  
  # Web管理路由 - 创建猫咪
> @bp.route('/create', methods=['GET', 'POST'], endpoint='admin_cats_create')
> @login_required
> def cats_create():
>     """创建猫咪"""
!     if not current_user.is_authenticated:
!         return redirect(url_for('auth.login'))
          
!     form = CatForm()
!     if form.validate_on_submit():
!         try:
!             data = {
!                 'name': form.name.data,
!                 'breed': form.breed.data,
!                 'age': form.age.data,
!                 'description': form.description.data,
!                 'is_adopted': form.is_adopted.data,
!                 'user_id': current_user.id,
!                 'created_at': datetime.utcnow(),
!                 'updated_at': datetime.utcnow()
!             }
!             CatService(db).create_cat(**data)
!             flash('猫咪添加成功!', 'success')
!             return redirect(url_for('cats.admin_cats_list'))
!         except Exception as e:
!             current_app.logger.error(f'创建猫咪失败: {str(e)}')
!             flash(f'添加失败: {str(e)}', 'danger')
!     return render_template('edit_cat.html', form=form)
  
  # API路由 - 更新猫咪
> @api_bp.route('/<int:id>', methods=['PUT'])
> @login_required
> def api_cats_update(id):
>     """更新猫咪信息(API)"""
      # 检查Content-Type
>     if request.content_type != 'application/json':
!         return jsonify({'error': 'Content-Type must be application/json'}), 400
      
>     try:
>         data = request.get_json()
>         if data is None:
!             return jsonify({'error': 'Request body must be valid JSON'}), 400
!     except Exception as e:
!         current_app.logger.error(f"JSON解析错误: {str(e)}")
!         return jsonify({'error': 'Invalid JSON format'}), 400
      
>     if not isinstance(data, dict):
!         return jsonify({'error': 'Request body must be a JSON object'}), 400
      
>     try:
>         cat = CatService(db).update_cat(
>             id,
>             name=data.get('name'),
>             breed=data.get('breed'),
>             age=data.get('age'),
>             description=data.get('description'),
>             is_adopted=data.get('is_adopted'),
>     updated_at=datetime.now(timezone.utc)
>         )
>         if not cat:
>             return jsonify({'error': 'Cat not found'}), 404
>         return jsonify({
>             'id': cat.id,
>             'name': cat.name,
>             'breed': cat.breed,
>             'age': cat.age
>         })
!     except Exception as e:
!         current_app.logger.error(f'API更新猫咪失败: {str(e)}')
!         return jsonify({'error': str(e)}), 500
  
  # Web管理路由 - 编辑猫咪
> @bp.route('/edit/<int:id>', methods=['GET', 'POST'], endpoint='admin_cats_edit')
> @login_required
> def cats_edit(id):
>     """编辑猫咪"""
!     cat = CatService(db).get(id)
!     if not cat:
!         flash('猫咪不存在', 'danger')
!         return redirect(url_for('cats.admin_cats_list'))
      
!     form = CatForm(obj=cat)
!     if form.validate_on_submit():
!         try:
!             update_data = {
!                 'name': form.name.data,
!                 'breed': form.breed.data,
!                 'age': form.age.data,
!                 'description': form.description.data,
!                 'is_adopted': form.is_adopted.data
!             }
!             CatService(db).update_cat(id, **update_data)
!             flash('猫咪更新成功!', 'success')
!             return redirect(url_for('cats.admin_cats_list'))
!         except Exception as e:
!             current_app.logger.error(f'更新猫咪失败: {str(e)}')
!             flash(f'更新失败: {str(e)}', 'danger')
!     return render_template('edit_cat.html', form=form, cat=cat)
  
  # API路由 - 删除猫咪
> @api_bp.route('/<int:id>', methods=['DELETE'])
> @login_required
> def api_cats_delete(id):
>     """删除猫咪(API)"""
>     try:
          # 检查删除是否成功
>         if CatService(db).delete_cat(id):
>             return '', 204
>         else:
>             return jsonify({'error': 'Cat not found'}), 404
!     except Exception as e:
!         current_app.logger.error(f'API删除猫咪失败: {str(e)}')
!         return jsonify({'error': str(e)}), 500
  
  # Web管理路由 - 删除猫咪
> @bp.route('/delete/<int:id>', methods=['POST'], endpoint='admin_cats_delete')
> @login_required
> @admin_required
> @owner_required(model=Cat, id_param='id')
> def cats_delete(id):
>     """删除猫咪(需要管理员或所有者权限)"""
!     def delete_images(cat):
!         for image in cat.images:
!             image_path = Path(str(current_app.static_folder)) / image.url.lstrip('/static/')
!             if image_path.exists():
!                 image_path.unlink()
      
!     return cat_crud.delete(
!         id=id,
!         before_delete=delete_images,
!         success_message='猫咪删除成功!',
!         error_message='删除失败: {}'
!     )
  
  # API路由 - 搜索猫咪
> @api_bp.route('/search', methods=['GET'])
> @login_required
> def api_cats_search():
>     """搜索猫咪(API)"""
>     search_params = {
>         'q': request.args.get('q', ''),
>         'breed': request.args.get('breed', ''),
>         'min_age': request.args.get('min_age', type=int),
>         'max_age': request.args.get('max_age', type=int),
>         'is_adopted': request.args.get('is_adopted', type=lambda x: x == 'true')
>     }
      
>     cats = CatService(db).search(
>         keyword=search_params['q'],
>         breed=search_params['breed'],
>         min_age=search_params['min_age'],
>         max_age=search_params['max_age'],
>         is_adopted=search_params['is_adopted']
>     )
      
>     return jsonify([{
>         'id': cat.id,
>         'name': cat.name,
>         'breed': cat.breed,
>         'age': cat.age
>     } for cat in cats])
  
  # API路由 - 上传猫咪图片
> @api_bp.route('/<int:id>/image', methods=['POST'])
> @limiter.limit("5 per minute")
> @login_required
> def api_cats_upload_image(id: int):
>     """上传猫咪图片"""
>     current_app.logger.info(f"Received upload request for cat {id}")
>     current_app.logger.debug(f"Request method: {request.method}")
>     current_app.logger.debug(f"Request path: {request.path}")
>     current_app.logger.debug(f"Request endpoint: {request.endpoint}")
>     current_app.logger.debug(f"Request headers: {request.headers}")
>     current_app.logger.debug(f"Content-Type: {request.content_type}")
>     current_app.logger.debug(f"Request files: {request.files}")
      
      # 检查Content-Type
>     if not request.content_type.startswith('multipart/form-data'):
>         current_app.logger.error("Invalid content type for image upload")
>         return jsonify({'error': 'Content-Type must be multipart/form-data'}), 400
      
>     cat = CatService(db).get(id)
>     if not cat:
>         return jsonify({'error': 'Cat not found'}), 404
              
      # 处理图片上传
>     if 'file' not in request.files:
>         return jsonify({'error': 'No file part'}), 400
          
>     image = request.files['file']
>     if not image or image.filename == '':
>         return jsonify({'error': 'No selected file'}), 400
              
>     try:
          # 保存图片
>         filename = secure_filename(f"cat_{id}_{image.filename}")
>         upload_folder = current_app.config['UPLOAD_FOLDER']
>         image.save(os.path.join(upload_folder, filename))
              
          # 创建图片记录
>         cat_image = CatImage(
>             url=f"/static/uploads/{filename}",
>             cat_id=id,
>             is_primary=False,
>     created_at=datetime.now(timezone.utc)
>         )
>         db.session.add(cat_image)
>         db.session.commit()
>         return jsonify({
>             'message': 'Image uploaded successfully',
>             'image_url': f"/static/uploads/{filename}"
>         }), 200
!     except Exception as e:
!         db.session.rollback()
!         current_app.logger.error(f"上传图片失败: {str(e)}")
!         return jsonify({'error': str(e)}), 500
