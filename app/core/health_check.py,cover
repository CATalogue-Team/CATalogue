> import os
> from pathlib import Path
> from typing import Dict
> from datetime import datetime, timezone
> from flask import Flask
> import logging
> from .environment_checker import EnvironmentChecker
  
> class HealthCheck:
>     """核心健康检查类"""
      
>     def __init__(self, app: Flask):
>         self.app = app
>         self.logger = logging.getLogger(__name__)
>         self.environment_checker = EnvironmentChecker(app)
              
>     def run_health_checks(self) -> bool:
>         """执行核心健康检查"""
!         try:
              # 使用environment_checker执行环境检查
!             if self.app.config['FLASK_ENV'] == 'development':
!                 checks = self.environment_checker.check_dev_environment()
!             else:
!                 checks = self.environment_checker.check_prod_environment()
              
              # 返回整体检查结果
!             return all(checks.values())
!         except Exception as e:
!             self.logger.error(f"健康检查执行失败: {str(e)}")
!             return False
              
>     def run_auto_repair(self, checks: Dict[str, bool]) -> Dict[str, bool]:
>         """自动修复失败的检查项"""
!         repaired = {}
!         for check_name, passed in checks.items():
!             if not passed:
!                 try:
!                     if check_name == 'dependencies_installed':
!                         repaired[check_name] = self._install_dependencies()
!                     elif check_name == 'migrations_applied':
!                         repaired[check_name] = self._apply_migrations()
!                     elif check_name == 'urls_validated':
!                         repaired[check_name] = self.environment_checker._validate_urls(dry_run=False)
!                     elif check_name == 'config_valid':
!                         repaired[check_name] = self._repair_missing_config()
!                     elif check_name == 'performance_optimized':
!                         repaired[check_name] = self._optimize_performance()
!                     else:
!                         repaired[check_name] = False
!                 except Exception as e:
!                     self.logger.error(f"自动修复 {check_name} 失败: {str(e)}")
!                     repaired[check_name] = False
!         return repaired
              
>     def _optimize_performance(self):
>         """性能优化自动修复"""
          # 数据库优化
!         if self.app.config['FLASK_ENV'] == 'production':
!             from sqlalchemy import text
!             db = self.app.extensions['sqlalchemy'].db
!             db.session.execute(text("""
!                 ANALYZE VERBOSE;
!                 VACUUM FULL VERBOSE;
!             """))
!             db.session.commit()
              
          # 缓存清理
!         if 'cache' in self.app.extensions:
!             self.app.extensions['cache'].clear()
          
>     def _repair_missing_config(self):
>         """修复缺失的配置项"""
!         from flask import current_app
!         if 'SECRET_KEY' not in current_app.config:
!             try:
!                 current_app.config['SECRET_KEY'] = os.urandom(24).hex()
!             except Exception as e:
!                 self.logger.error(f"生成SECRET_KEY失败: {str(e)}")
!                 raise
                  
!         if 'UPLOAD_FOLDER' not in current_app.config:
!             try:
!                 os.makedirs('uploads', exist_ok=True)
!                 current_app.config['UPLOAD_FOLDER'] = 'uploads'
!             except OSError as e:
!                 self.logger.warning(f"创建上传目录失败: {str(e)}")
!                 return False
!         return True
              
>     def _install_dependencies(self) -> bool:
>         """安装缺失的依赖"""
!         try:
!             import subprocess
!             result = subprocess.run(['pip', 'install', '-r', 'requirements.txt'], check=True)
!             return result.returncode == 0
!         except Exception as e:
!             self.logger.error(f"依赖安装失败: {str(e)}")
!             return False
              
>     def _apply_migrations(self):
>         """应用数据库迁移"""
!         from flask_migrate import upgrade
!         with self.app.app_context():
!             upgrade()
          
>     def register_cli_commands(self):
>         """注册CLI命令"""
>         import click
>         @click.command('check-env')
>         @click.option('--repair', is_flag=True, help='自动修复问题')
>         def check_env(repair):
>             """执行环境检查"""
!             click.echo("执行环境检查...")
!             if self.app.config['FLASK_ENV'] == 'development':
!                 checks = self.environment_checker.check_dev_environment()
!             else:
!                 checks = self.environment_checker.check_prod_environment()
                  
!             if repair:
!                 self.run_auto_repair(checks)
                  
!             for check, passed in checks.items():
!                 color = 'green' if passed else 'red'
!                 click.echo(click.style(
!                     f"{'✓' if passed else '✗'} {check.replace('_', ' ')}",
!                     fg=color))
                  
>         self.app.cli.add_command(check_env)
              
>     def save_check_results(self, results: Dict[str, bool]):
>         """保存检查结果到数据库"""
!         try:
!             from ..models import EnvironmentCheck
!             with self.app.app_context():
!                 db = self.app.extensions['sqlalchemy']['db']
!                 if isinstance(db, dict):
!                     return True
!                 check = EnvironmentCheck(
!                     check_name='environment_check',
!                     status='success' if all(results.values()) else 'failed',
!                     message=str(results),
!                     timestamp=datetime.now(timezone.utc)
!                 )
!                 db.session.add(check)
!                 db.session.commit()
!             return True
!         except Exception as e:
!             self.logger.error(f"保存检查结果失败: {str(e)}")
!             return False
